// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tes_array.proto
#ifndef GRPC_tes_5farray_2eproto__INCLUDED
#define GRPC_tes_5farray_2eproto__INCLUDED

#include "tes_array.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace mathtest {

class MathTest final {
 public:
  static constexpr char const* service_full_name() {
    return "mathtest.MathTest";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SendRequest(::grpc::ClientContext* context, const ::mathtest::MathRequest& request, ::mathtest::MathReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mathtest::MathReply>> AsyncSendRequest(::grpc::ClientContext* context, const ::mathtest::MathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mathtest::MathReply>>(AsyncSendRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mathtest::MathReply>> PrepareAsyncSendRequest(::grpc::ClientContext* context, const ::mathtest::MathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mathtest::MathReply>>(PrepareAsyncSendRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status Sendarray(::grpc::ClientContext* context, const ::mathtest::MathRequest& request, ::mathtest::Mathhasil* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mathtest::Mathhasil>> AsyncSendarray(::grpc::ClientContext* context, const ::mathtest::MathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mathtest::Mathhasil>>(AsyncSendarrayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mathtest::Mathhasil>> PrepareAsyncSendarray(::grpc::ClientContext* context, const ::mathtest::MathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mathtest::Mathhasil>>(PrepareAsyncSendarrayRaw(context, request, cq));
    }
    virtual ::grpc::Status Softhaliza(::grpc::ClientContext* context, const ::mathtest::RecBro& request, ::mathtest::Datablob* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mathtest::Datablob>> AsyncSofthaliza(::grpc::ClientContext* context, const ::mathtest::RecBro& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mathtest::Datablob>>(AsyncSofthalizaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mathtest::Datablob>> PrepareAsyncSofthaliza(::grpc::ClientContext* context, const ::mathtest::RecBro& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mathtest::Datablob>>(PrepareAsyncSofthalizaRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SendRequest(::grpc::ClientContext* context, const ::mathtest::MathRequest* request, ::mathtest::MathReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendRequest(::grpc::ClientContext* context, const ::mathtest::MathRequest* request, ::mathtest::MathReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Sendarray(::grpc::ClientContext* context, const ::mathtest::MathRequest* request, ::mathtest::Mathhasil* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Sendarray(::grpc::ClientContext* context, const ::mathtest::MathRequest* request, ::mathtest::Mathhasil* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Softhaliza(::grpc::ClientContext* context, const ::mathtest::RecBro* request, ::mathtest::Datablob* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Softhaliza(::grpc::ClientContext* context, const ::mathtest::RecBro* request, ::mathtest::Datablob* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mathtest::MathReply>* AsyncSendRequestRaw(::grpc::ClientContext* context, const ::mathtest::MathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mathtest::MathReply>* PrepareAsyncSendRequestRaw(::grpc::ClientContext* context, const ::mathtest::MathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mathtest::Mathhasil>* AsyncSendarrayRaw(::grpc::ClientContext* context, const ::mathtest::MathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mathtest::Mathhasil>* PrepareAsyncSendarrayRaw(::grpc::ClientContext* context, const ::mathtest::MathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mathtest::Datablob>* AsyncSofthalizaRaw(::grpc::ClientContext* context, const ::mathtest::RecBro& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mathtest::Datablob>* PrepareAsyncSofthalizaRaw(::grpc::ClientContext* context, const ::mathtest::RecBro& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SendRequest(::grpc::ClientContext* context, const ::mathtest::MathRequest& request, ::mathtest::MathReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mathtest::MathReply>> AsyncSendRequest(::grpc::ClientContext* context, const ::mathtest::MathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mathtest::MathReply>>(AsyncSendRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mathtest::MathReply>> PrepareAsyncSendRequest(::grpc::ClientContext* context, const ::mathtest::MathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mathtest::MathReply>>(PrepareAsyncSendRequestRaw(context, request, cq));
    }
    ::grpc::Status Sendarray(::grpc::ClientContext* context, const ::mathtest::MathRequest& request, ::mathtest::Mathhasil* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mathtest::Mathhasil>> AsyncSendarray(::grpc::ClientContext* context, const ::mathtest::MathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mathtest::Mathhasil>>(AsyncSendarrayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mathtest::Mathhasil>> PrepareAsyncSendarray(::grpc::ClientContext* context, const ::mathtest::MathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mathtest::Mathhasil>>(PrepareAsyncSendarrayRaw(context, request, cq));
    }
    ::grpc::Status Softhaliza(::grpc::ClientContext* context, const ::mathtest::RecBro& request, ::mathtest::Datablob* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mathtest::Datablob>> AsyncSofthaliza(::grpc::ClientContext* context, const ::mathtest::RecBro& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mathtest::Datablob>>(AsyncSofthalizaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mathtest::Datablob>> PrepareAsyncSofthaliza(::grpc::ClientContext* context, const ::mathtest::RecBro& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mathtest::Datablob>>(PrepareAsyncSofthalizaRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SendRequest(::grpc::ClientContext* context, const ::mathtest::MathRequest* request, ::mathtest::MathReply* response, std::function<void(::grpc::Status)>) override;
      void SendRequest(::grpc::ClientContext* context, const ::mathtest::MathRequest* request, ::mathtest::MathReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Sendarray(::grpc::ClientContext* context, const ::mathtest::MathRequest* request, ::mathtest::Mathhasil* response, std::function<void(::grpc::Status)>) override;
      void Sendarray(::grpc::ClientContext* context, const ::mathtest::MathRequest* request, ::mathtest::Mathhasil* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Softhaliza(::grpc::ClientContext* context, const ::mathtest::RecBro* request, ::mathtest::Datablob* response, std::function<void(::grpc::Status)>) override;
      void Softhaliza(::grpc::ClientContext* context, const ::mathtest::RecBro* request, ::mathtest::Datablob* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mathtest::MathReply>* AsyncSendRequestRaw(::grpc::ClientContext* context, const ::mathtest::MathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mathtest::MathReply>* PrepareAsyncSendRequestRaw(::grpc::ClientContext* context, const ::mathtest::MathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mathtest::Mathhasil>* AsyncSendarrayRaw(::grpc::ClientContext* context, const ::mathtest::MathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mathtest::Mathhasil>* PrepareAsyncSendarrayRaw(::grpc::ClientContext* context, const ::mathtest::MathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mathtest::Datablob>* AsyncSofthalizaRaw(::grpc::ClientContext* context, const ::mathtest::RecBro& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mathtest::Datablob>* PrepareAsyncSofthalizaRaw(::grpc::ClientContext* context, const ::mathtest::RecBro& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_Sendarray_;
    const ::grpc::internal::RpcMethod rpcmethod_Softhaliza_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SendRequest(::grpc::ServerContext* context, const ::mathtest::MathRequest* request, ::mathtest::MathReply* response);
    virtual ::grpc::Status Sendarray(::grpc::ServerContext* context, const ::mathtest::MathRequest* request, ::mathtest::Mathhasil* response);
    virtual ::grpc::Status Softhaliza(::grpc::ServerContext* context, const ::mathtest::RecBro* request, ::mathtest::Datablob* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendRequest() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendRequest(::grpc::ServerContext* /*context*/, const ::mathtest::MathRequest* /*request*/, ::mathtest::MathReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendRequest(::grpc::ServerContext* context, ::mathtest::MathRequest* request, ::grpc::ServerAsyncResponseWriter< ::mathtest::MathReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Sendarray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Sendarray() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Sendarray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sendarray(::grpc::ServerContext* /*context*/, const ::mathtest::MathRequest* /*request*/, ::mathtest::Mathhasil* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendarray(::grpc::ServerContext* context, ::mathtest::MathRequest* request, ::grpc::ServerAsyncResponseWriter< ::mathtest::Mathhasil>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Softhaliza : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Softhaliza() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Softhaliza() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Softhaliza(::grpc::ServerContext* /*context*/, const ::mathtest::RecBro* /*request*/, ::mathtest::Datablob* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSofthaliza(::grpc::ServerContext* context, ::mathtest::RecBro* request, ::grpc::ServerAsyncResponseWriter< ::mathtest::Datablob>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendRequest<WithAsyncMethod_Sendarray<WithAsyncMethod_Softhaliza<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendRequest() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::mathtest::MathRequest, ::mathtest::MathReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mathtest::MathRequest* request, ::mathtest::MathReply* response) { return this->SendRequest(context, request, response); }));}
    void SetMessageAllocatorFor_SendRequest(
        ::grpc::MessageAllocator< ::mathtest::MathRequest, ::mathtest::MathReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mathtest::MathRequest, ::mathtest::MathReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendRequest(::grpc::ServerContext* /*context*/, const ::mathtest::MathRequest* /*request*/, ::mathtest::MathReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::mathtest::MathRequest* /*request*/, ::mathtest::MathReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Sendarray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Sendarray() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::mathtest::MathRequest, ::mathtest::Mathhasil>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mathtest::MathRequest* request, ::mathtest::Mathhasil* response) { return this->Sendarray(context, request, response); }));}
    void SetMessageAllocatorFor_Sendarray(
        ::grpc::MessageAllocator< ::mathtest::MathRequest, ::mathtest::Mathhasil>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mathtest::MathRequest, ::mathtest::Mathhasil>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Sendarray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sendarray(::grpc::ServerContext* /*context*/, const ::mathtest::MathRequest* /*request*/, ::mathtest::Mathhasil* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Sendarray(
      ::grpc::CallbackServerContext* /*context*/, const ::mathtest::MathRequest* /*request*/, ::mathtest::Mathhasil* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Softhaliza : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Softhaliza() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::mathtest::RecBro, ::mathtest::Datablob>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mathtest::RecBro* request, ::mathtest::Datablob* response) { return this->Softhaliza(context, request, response); }));}
    void SetMessageAllocatorFor_Softhaliza(
        ::grpc::MessageAllocator< ::mathtest::RecBro, ::mathtest::Datablob>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mathtest::RecBro, ::mathtest::Datablob>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Softhaliza() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Softhaliza(::grpc::ServerContext* /*context*/, const ::mathtest::RecBro* /*request*/, ::mathtest::Datablob* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Softhaliza(
      ::grpc::CallbackServerContext* /*context*/, const ::mathtest::RecBro* /*request*/, ::mathtest::Datablob* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SendRequest<WithCallbackMethod_Sendarray<WithCallbackMethod_Softhaliza<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendRequest() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendRequest(::grpc::ServerContext* /*context*/, const ::mathtest::MathRequest* /*request*/, ::mathtest::MathReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Sendarray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Sendarray() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Sendarray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sendarray(::grpc::ServerContext* /*context*/, const ::mathtest::MathRequest* /*request*/, ::mathtest::Mathhasil* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Softhaliza : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Softhaliza() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Softhaliza() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Softhaliza(::grpc::ServerContext* /*context*/, const ::mathtest::RecBro* /*request*/, ::mathtest::Datablob* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendRequest() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendRequest(::grpc::ServerContext* /*context*/, const ::mathtest::MathRequest* /*request*/, ::mathtest::MathReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Sendarray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Sendarray() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Sendarray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sendarray(::grpc::ServerContext* /*context*/, const ::mathtest::MathRequest* /*request*/, ::mathtest::Mathhasil* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendarray(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Softhaliza : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Softhaliza() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Softhaliza() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Softhaliza(::grpc::ServerContext* /*context*/, const ::mathtest::RecBro* /*request*/, ::mathtest::Datablob* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSofthaliza(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendRequest() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendRequest(::grpc::ServerContext* /*context*/, const ::mathtest::MathRequest* /*request*/, ::mathtest::MathReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Sendarray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Sendarray() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Sendarray(context, request, response); }));
    }
    ~WithRawCallbackMethod_Sendarray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sendarray(::grpc::ServerContext* /*context*/, const ::mathtest::MathRequest* /*request*/, ::mathtest::Mathhasil* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Sendarray(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Softhaliza : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Softhaliza() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Softhaliza(context, request, response); }));
    }
    ~WithRawCallbackMethod_Softhaliza() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Softhaliza(::grpc::ServerContext* /*context*/, const ::mathtest::RecBro* /*request*/, ::mathtest::Datablob* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Softhaliza(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendRequest() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mathtest::MathRequest, ::mathtest::MathReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mathtest::MathRequest, ::mathtest::MathReply>* streamer) {
                       return this->StreamedSendRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendRequest(::grpc::ServerContext* /*context*/, const ::mathtest::MathRequest* /*request*/, ::mathtest::MathReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mathtest::MathRequest,::mathtest::MathReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Sendarray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Sendarray() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mathtest::MathRequest, ::mathtest::Mathhasil>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mathtest::MathRequest, ::mathtest::Mathhasil>* streamer) {
                       return this->StreamedSendarray(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Sendarray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Sendarray(::grpc::ServerContext* /*context*/, const ::mathtest::MathRequest* /*request*/, ::mathtest::Mathhasil* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendarray(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mathtest::MathRequest,::mathtest::Mathhasil>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Softhaliza : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Softhaliza() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mathtest::RecBro, ::mathtest::Datablob>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mathtest::RecBro, ::mathtest::Datablob>* streamer) {
                       return this->StreamedSofthaliza(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Softhaliza() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Softhaliza(::grpc::ServerContext* /*context*/, const ::mathtest::RecBro* /*request*/, ::mathtest::Datablob* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSofthaliza(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mathtest::RecBro,::mathtest::Datablob>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendRequest<WithStreamedUnaryMethod_Sendarray<WithStreamedUnaryMethod_Softhaliza<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendRequest<WithStreamedUnaryMethod_Sendarray<WithStreamedUnaryMethod_Softhaliza<Service > > > StreamedService;
};

}  // namespace mathtest


#endif  // GRPC_tes_5farray_2eproto__INCLUDED
