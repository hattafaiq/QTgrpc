// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: route_guide.proto

#include "route_guide.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace routeguide {
PROTOBUF_CONSTEXPR Point::Point(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.latitude_)*/0
  , /*decltype(_impl_.longitude_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointDefaultTypeInternal _Point_default_instance_;
PROTOBUF_CONSTEXPR RouteNote::RouteNote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouteNoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteNoteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteNoteDefaultTypeInternal() {}
  union {
    RouteNote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteNoteDefaultTypeInternal _RouteNote_default_instance_;
PROTOBUF_CONSTEXPR Routekomdat::Routekomdat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoutekomdatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutekomdatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutekomdatDefaultTypeInternal() {}
  union {
    Routekomdat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutekomdatDefaultTypeInternal _Routekomdat_default_instance_;
PROTOBUF_CONSTEXPR Routebaru::Routebaru(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_f_)*/{}
  , /*decltype(_impl_.header_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoutebaruDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutebaruDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutebaruDefaultTypeInternal() {}
  union {
    Routebaru _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutebaruDefaultTypeInternal _Routebaru_default_instance_;
}  // namespace routeguide
static ::_pb::Metadata file_level_metadata_route_5fguide_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_route_5fguide_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_route_5fguide_2eproto = nullptr;

const uint32_t TableStruct_route_5fguide_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routeguide::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::routeguide::Point, _impl_.latitude_),
  PROTOBUF_FIELD_OFFSET(::routeguide::Point, _impl_.longitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routeguide::RouteNote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::routeguide::RouteNote, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::routeguide::RouteNote, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routeguide::Routekomdat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::routeguide::Routekomdat, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::routeguide::Routekomdat, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routeguide::Routebaru, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::routeguide::Routebaru, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::routeguide::Routebaru, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::routeguide::Routebaru, _impl_.data_f_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::routeguide::Point)},
  { 8, -1, -1, sizeof(::routeguide::RouteNote)},
  { 16, -1, -1, sizeof(::routeguide::Routekomdat)},
  { 24, -1, -1, sizeof(::routeguide::Routebaru)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::routeguide::_Point_default_instance_._instance,
  &::routeguide::_RouteNote_default_instance_._instance,
  &::routeguide::_Routekomdat_default_instance_._instance,
  &::routeguide::_Routebaru_default_instance_._instance,
};

const char descriptor_table_protodef_route_5fguide_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021route_guide.proto\022\nrouteguide\",\n\005Point"
  "\022\020\n\010latitude\030\001 \001(\005\022\021\n\tlongitude\030\002 \001(\005\"A\n"
  "\tRouteNote\022#\n\010location\030\001 \001(\0132\021.routeguid"
  "e.Point\022\017\n\007message\030\002 \001(\t\"+\n\013Routekomdat\022"
  "\016\n\006header\030\001 \001(\t\022\014\n\004data\030\002 \001(\005\"9\n\tRouteba"
  "ru\022\016\n\006header\030\001 \001(\t\022\014\n\004data\030\002 \001(\005\022\016\n\006data"
  "_f\030\003 \003(\0022\313\001\n\nRouteGuide\022\?\n\tRouteChat\022\025.r"
  "outeguide.RouteNote\032\025.routeguide.RouteNo"
  "te\"\000(\0010\001\022@\n\006komdat\022\027.routeguide.Routekom"
  "dat\032\027.routeguide.Routekomdat\"\000(\0010\001\022:\n\004ba"
  "ru\022\025.routeguide.Routebaru\032\025.routeguide.R"
  "outebaru\"\000(\0010\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_route_5fguide_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_route_5fguide_2eproto = {
    false, false, 462, descriptor_table_protodef_route_5fguide_2eproto,
    "route_guide.proto",
    &descriptor_table_route_5fguide_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_route_5fguide_2eproto::offsets,
    file_level_metadata_route_5fguide_2eproto, file_level_enum_descriptors_route_5fguide_2eproto,
    file_level_service_descriptors_route_5fguide_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_route_5fguide_2eproto_getter() {
  return &descriptor_table_route_5fguide_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_route_5fguide_2eproto(&descriptor_table_route_5fguide_2eproto);
namespace routeguide {

// ===================================================================

class Point::_Internal {
 public:
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:routeguide.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Point* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.latitude_){}
    , decltype(_impl_.longitude_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.latitude_, &from._impl_.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.longitude_) -
    reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.longitude_));
  // @@protoc_insertion_point(copy_constructor:routeguide.Point)
}

inline void Point::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.latitude_){0}
    , decltype(_impl_.longitude_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:routeguide.Point)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:routeguide.Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.longitude_) -
      reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.longitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routeguide.Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 latitude = 1;
  if (this->_internal_latitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_latitude(), target);
  }

  // int32 longitude = 2;
  if (this->_internal_longitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routeguide.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routeguide.Point)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 latitude = 1;
  if (this->_internal_latitude() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_latitude());
  }

  // int32 longitude = 2;
  if (this->_internal_longitude() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_longitude());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }


void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Point*>(&to_msg);
  auto& from = static_cast<const Point&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:routeguide.Point)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_latitude() != 0) {
    _this->_internal_set_latitude(from._internal_latitude());
  }
  if (from._internal_longitude() != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routeguide.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, _impl_.longitude_)
      + sizeof(Point::_impl_.longitude_)
      - PROTOBUF_FIELD_OFFSET(Point, _impl_.latitude_)>(
          reinterpret_cast<char*>(&_impl_.latitude_),
          reinterpret_cast<char*>(&other->_impl_.latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_5fguide_2eproto_getter, &descriptor_table_route_5fguide_2eproto_once,
      file_level_metadata_route_5fguide_2eproto[0]);
}

// ===================================================================

class RouteNote::_Internal {
 public:
  static const ::routeguide::Point& location(const RouteNote* msg);
};

const ::routeguide::Point&
RouteNote::_Internal::location(const RouteNote* msg) {
  return *msg->_impl_.location_;
}
RouteNote::RouteNote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:routeguide.RouteNote)
}
RouteNote::RouteNote(const RouteNote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RouteNote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.location_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::routeguide::Point(*from._impl_.location_);
  }
  // @@protoc_insertion_point(copy_constructor:routeguide.RouteNote)
}

inline void RouteNote::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.location_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RouteNote::~RouteNote() {
  // @@protoc_insertion_point(destructor:routeguide.RouteNote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouteNote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.location_;
}

void RouteNote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouteNote::Clear() {
// @@protoc_insertion_point(message_clear_start:routeguide.RouteNote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteNote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .routeguide.Point location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "routeguide.RouteNote.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteNote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routeguide.RouteNote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .routeguide.Point location = 1;
  if (this->_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "routeguide.RouteNote.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routeguide.RouteNote)
  return target;
}

size_t RouteNote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routeguide.RouteNote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .routeguide.Point location = 1;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteNote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RouteNote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteNote::GetClassData() const { return &_class_data_; }


void RouteNote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RouteNote*>(&to_msg);
  auto& from = static_cast<const RouteNote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:routeguide.RouteNote)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_location()) {
    _this->_internal_mutable_location()->::routeguide::Point::MergeFrom(
        from._internal_location());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteNote::CopyFrom(const RouteNote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routeguide.RouteNote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteNote::IsInitialized() const {
  return true;
}

void RouteNote::InternalSwap(RouteNote* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.location_, other->_impl_.location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteNote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_5fguide_2eproto_getter, &descriptor_table_route_5fguide_2eproto_once,
      file_level_metadata_route_5fguide_2eproto[1]);
}

// ===================================================================

class Routekomdat::_Internal {
 public:
};

Routekomdat::Routekomdat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:routeguide.Routekomdat)
}
Routekomdat::Routekomdat(const Routekomdat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Routekomdat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.header_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_header().empty()) {
    _this->_impl_.header_.Set(from._internal_header(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.data_ = from._impl_.data_;
  // @@protoc_insertion_point(copy_constructor:routeguide.Routekomdat)
}

inline void Routekomdat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){}
    , decltype(_impl_.data_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.header_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Routekomdat::~Routekomdat() {
  // @@protoc_insertion_point(destructor:routeguide.Routekomdat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Routekomdat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.header_.Destroy();
}

void Routekomdat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Routekomdat::Clear() {
// @@protoc_insertion_point(message_clear_start:routeguide.Routekomdat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.header_.ClearToEmpty();
  _impl_.data_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Routekomdat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_header();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "routeguide.Routekomdat.header"));
        } else
          goto handle_unusual;
        continue;
      // int32 data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Routekomdat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routeguide.Routekomdat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string header = 1;
  if (!this->_internal_header().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_header().data(), static_cast<int>(this->_internal_header().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "routeguide.Routekomdat.header");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_header(), target);
  }

  // int32 data = 2;
  if (this->_internal_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routeguide.Routekomdat)
  return target;
}

size_t Routekomdat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routeguide.Routekomdat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string header = 1;
  if (!this->_internal_header().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_header());
  }

  // int32 data = 2;
  if (this->_internal_data() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Routekomdat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Routekomdat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Routekomdat::GetClassData() const { return &_class_data_; }


void Routekomdat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Routekomdat*>(&to_msg);
  auto& from = static_cast<const Routekomdat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:routeguide.Routekomdat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_header().empty()) {
    _this->_internal_set_header(from._internal_header());
  }
  if (from._internal_data() != 0) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Routekomdat::CopyFrom(const Routekomdat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routeguide.Routekomdat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Routekomdat::IsInitialized() const {
  return true;
}

void Routekomdat::InternalSwap(Routekomdat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.header_, lhs_arena,
      &other->_impl_.header_, rhs_arena
  );
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Routekomdat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_5fguide_2eproto_getter, &descriptor_table_route_5fguide_2eproto_once,
      file_level_metadata_route_5fguide_2eproto[2]);
}

// ===================================================================

class Routebaru::_Internal {
 public:
};

Routebaru::Routebaru(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:routeguide.Routebaru)
}
Routebaru::Routebaru(const Routebaru& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Routebaru* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_f_){from._impl_.data_f_}
    , decltype(_impl_.header_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.header_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_header().empty()) {
    _this->_impl_.header_.Set(from._internal_header(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.data_ = from._impl_.data_;
  // @@protoc_insertion_point(copy_constructor:routeguide.Routebaru)
}

inline void Routebaru::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_f_){arena}
    , decltype(_impl_.header_){}
    , decltype(_impl_.data_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.header_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Routebaru::~Routebaru() {
  // @@protoc_insertion_point(destructor:routeguide.Routebaru)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Routebaru::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_f_.~RepeatedField();
  _impl_.header_.Destroy();
}

void Routebaru::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Routebaru::Clear() {
// @@protoc_insertion_point(message_clear_start:routeguide.Routebaru)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_f_.Clear();
  _impl_.header_.ClearToEmpty();
  _impl_.data_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Routebaru::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_header();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "routeguide.Routebaru.header"));
        } else
          goto handle_unusual;
        continue;
      // int32 data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float data_f = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data_f(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 29) {
          _internal_add_data_f(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Routebaru::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routeguide.Routebaru)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string header = 1;
  if (!this->_internal_header().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_header().data(), static_cast<int>(this->_internal_header().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "routeguide.Routebaru.header");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_header(), target);
  }

  // int32 data = 2;
  if (this->_internal_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_data(), target);
  }

  // repeated float data_f = 3;
  if (this->_internal_data_f_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_data_f(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routeguide.Routebaru)
  return target;
}

size_t Routebaru::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routeguide.Routebaru)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data_f = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_f_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string header = 1;
  if (!this->_internal_header().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_header());
  }

  // int32 data = 2;
  if (this->_internal_data() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Routebaru::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Routebaru::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Routebaru::GetClassData() const { return &_class_data_; }


void Routebaru::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Routebaru*>(&to_msg);
  auto& from = static_cast<const Routebaru&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:routeguide.Routebaru)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_f_.MergeFrom(from._impl_.data_f_);
  if (!from._internal_header().empty()) {
    _this->_internal_set_header(from._internal_header());
  }
  if (from._internal_data() != 0) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Routebaru::CopyFrom(const Routebaru& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routeguide.Routebaru)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Routebaru::IsInitialized() const {
  return true;
}

void Routebaru::InternalSwap(Routebaru* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_f_.InternalSwap(&other->_impl_.data_f_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.header_, lhs_arena,
      &other->_impl_.header_, rhs_arena
  );
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Routebaru::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_route_5fguide_2eproto_getter, &descriptor_table_route_5fguide_2eproto_once,
      file_level_metadata_route_5fguide_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace routeguide
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::routeguide::Point*
Arena::CreateMaybeMessage< ::routeguide::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::routeguide::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::routeguide::RouteNote*
Arena::CreateMaybeMessage< ::routeguide::RouteNote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::routeguide::RouteNote >(arena);
}
template<> PROTOBUF_NOINLINE ::routeguide::Routekomdat*
Arena::CreateMaybeMessage< ::routeguide::Routekomdat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::routeguide::Routekomdat >(arena);
}
template<> PROTOBUF_NOINLINE ::routeguide::Routebaru*
Arena::CreateMaybeMessage< ::routeguide::Routebaru >(Arena* arena) {
  return Arena::CreateMessageInternal< ::routeguide::Routebaru >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
